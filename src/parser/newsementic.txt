

offset = 0



enter(id.lexeme,T.type,offset); offset = offset+T.width;

type='proc'; enterproc(id.lexeme, type, offset);

type='record'; enterrecord(id.lexeme, type, offset);
gen(id '=' F.addr);


enter(id.lexeme, type, offset); offset=offset+X.offset;
T.type=C.type; T.width=C.width;
t=X.type; w=X.width;
X.type=int; X.width=4;
X.type=float; X.width=8;

enter(id.lexeme, type, offset); offset=offset+X.offset;


enter(id.lexeme, type, offset);

C.type=array(num.val, C1.type); C.width=num.val*C1.width;
C.type=t; C.width=w;
gen(L.array '[ L.offset ']' '=' E.addr);
backpatch(B.truelist, M9.quad); backpatch(B.falselist, M10.quad); S.nextlist=merge(merge(S1.nextlist, N.nextlist), S2.nextlist);
N.nextlist=makelist(nextquad); gen('goto_');


S.nextlist=B.falselist; backpatch(S1.nextlist, M11.quad); backpatch(B.truelist, M12.quad); gen('goto'M11.quad);


E.addr = newtemp(); gen( E.addr'=' E'.addr '+' G.addr);
E'.addr=G.addr;

G.addr = newtemp(); gen( G.addr'=' G'.addr '*' F.addr);
G'.addr=F.addr;

F.addr=E.addr;
F.addr=lookup(id.lexeme); if F.addr = nil then error;
F.val=num.lex
F.val=digit.lex;
E.addr = newtemp(); gen( E.addr '=' L. array '[' L.offset ']' );
L.array=lookup(id.lexeme); if L.array = nil then error; L.offset=newtemp(); gen( L.offset'=' L'.offset );
L'.type = L.array.type.elem ;
L'.array = L'1. array; t = newtemp(); gen( t ‘=’ E.addr '*' L'.type.width ); L'.offset = newtemp(); gen( L'.offset '=' L'1.offset '+' t );
L'.type = L'1.type.elem ;
L'.offset= = 0;


backpatch(H1.falselist, M15.quad); B.truelist=merge(H1.truelist, H2.truelist); B.falselist=H2.falselist;
M15.quad=nextquad;


backpatch(I1.truelist, M16.quad); H.falselist=merge(I1.falselist, I2.falselist); H.truelist=I2.truelist;
M16.quad=nextquad;

I.truelist=B.falselist; I.falselist=B.truelist;
I.truelist=B.truelistl I.falselist=B.falselist;
I.truelist=makelist(nextquad); I.falselist=makelist(nextquad + 1); gen('if' E1.addr relop E2.addr 'goto'); gen('goto_');
I.truelist=makelist(nextquad); gen('goto_');
I.falselist=makelist(nextquad); gen('goto_');







type='proc'; enterproc(id.lexeme, type, offset);
n = 0; for(q 中每个t do {gen('param' t); n=n+1;}); gen('call' id.addr ',' n);
gen('return' E.addr);
将q初始化为只包含E.addr;
将E.addr添加到q队尾;
